package data_structure_;

import java.util.*;

public class stack_question {
	public static void main(String[] args) throws Exception {

		Scanner scn = new Scanner(System.in);
		stack s = new stack();
		s.push(10);
		s.push(20);
		s.push(30);
		s.push(40);
		displayreverse(s);
		s.display();

		System.out.println("****************");
		s.display();
		actualreverse(s, new stack());
		s.display();
		System.out.println("****************");
		int [] arr = { 50, 85, 4556, 612645, 6597813};
		greatestelement(arr);
		
		System.out.println("****************");
		int[] arrr = {10,20,30,40,50};
		int[] anss = stockspan( arrr);
		for(int i=0;i<anss.length;i++) {
			System.out.println(anss[i]+" ");
		}
		
		System.out.println("**************");
		

	}

	public static void displayreverse(stack s) throws Exception {
		if (s.isempty()) {
			return;
		}
		int temp = s.pop();
		displayreverse(s);
		System.out.println(temp);
		s.push(temp);

	}

	public static void actualreverse(stack s, stack helper) throws Exception {
		if (s.isempty()) {
			actualreverse2(s, helper);
			return;
		}

		int item = s.pop();
		helper.push(item);
		actualreverse(s, helper);

	}

	public static void actualreverse2(stack s, stack helper) throws Exception {
		if (helper.isempty()) {
			return;
		}
		int temp = helper.pop();
		actualreverse2(s, helper);
		s.push(temp);
		

	}
	public static void greatestelement(int[] arr) {
	    java.util.Stack<Integer> s = new Stack<>();
	    
		//s.push(arr[0]);
		for(int i =0; i<arr.length; i++) {
			while(!s.isEmpty()&& arr[i]>s.peek()) {
				System.out.println(s.pop() + "  afsdjkl  " + arr[i]);
			}
			s.push(arr[i]);
		}
		while(!s.isEmpty()) {
			System.out.println(s.pop()+ "  ersgdthkj  "+ -1);
		}
		 s.push(arr[0]);
		
		
	}
	public static int[] stockspan(int[] arrr) {
		 java.util.Stack<Integer> s = new Stack<>();
		int[] ans = new int[arrr.length];
		for(int i =0; i<arrr.length; i++) {
			while(!s.isEmpty()&&arrr[i]>s.peek()) {
				s.pop();
				
			}
			if(s.isEmpty()) {
				ans[i] = i+1;
			}else {
				ans[i] = i-s.peek();
			}
			s.push(i);
		}
		
		return ans;
		
		
		 
	}
}
